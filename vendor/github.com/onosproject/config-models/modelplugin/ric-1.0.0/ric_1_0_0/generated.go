// Code generated by YGOT. DO NOT EDIT.
/*
Package ric_1_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/adibrastegarnia/go/pkg/mod/github.com/openconfig/ygot@v0.6.1-0.20200103195725-e3c44fa43926/genutil/names.go
using the following YANG input files:
	- test1@2020-11-18.yang
Imported modules were sourced from:
	- yang/...
*/
package ric_1_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Cont1A	*Test1_Cont1A	`path:"cont1a" module:"test1"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Test1_Cont1A represents the /test1/cont1a YANG schema element.
type Test1_Cont1A struct {
	Leaf1A	*string	`path:"leaf1a" module:"test1"`
	Leaf2A	*string	`path:"leaf2a" module:"test1"`
}

// IsYANGGoStruct ensures that Test1_Cont1A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Test1_Cont1A) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Test1_Cont1A) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Test1_Cont1A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Test1_Cont1A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xdf, 0x6b, 0xc2, 0x30,
		0x10, 0x7e, 0xef, 0x5f, 0x11, 0xf2, 0x5c, 0xd0, 0x0a, 0x82, 0xf4, 0x4d, 0x14, 0x19, 0xec, 0x07,
		0x63, 0x93, 0xbd, 0x8c, 0x31, 0x42, 0x3d, 0x6b, 0x98, 0x26, 0x92, 0xa6, 0x9b, 0x32, 0xfa, 0xbf,
		0x8f, 0x36, 0x59, 0x67, 0xda, 0xa4, 0xc6, 0x81, 0x8c, 0x81, 0x6f, 0x7a, 0xf7, 0x35, 0xf7, 0xdd,
		0x7d, 0xc9, 0xc7, 0x7d, 0x06, 0x08, 0x21, 0x84, 0xef, 0xc8, 0x06, 0x70, 0x8c, 0xf0, 0x02, 0xde,
		0x69, 0x02, 0x38, 0x54, 0xd1, 0x6b, 0xca, 0x16, 0x38, 0x46, 0x91, 0xfe, 0x3b, 0xe1, 0x6c, 0x49,
		0x53, 0x1c, 0xa3, 0xbe, 0x0e, 0x4c, 0xa9, 0xc0, 0x31, 0x52, 0x47, 0x54, 0x81, 0x84, 0x33, 0x19,
		0x11, 0x23, 0x66, 0x1c, 0xaf, 0xf3, 0xa1, 0x99, 0x35, 0xcb, 0xd4, 0xe1, 0x66, 0xb9, 0x3a, 0x71,
		0x2f, 0x60, 0x49, 0x77, 0xad, 0x2a, 0x46, 0x25, 0x19, 0x35, 0xaa, 0x54, 0xd9, 0x47, 0x9e, 0x8b,
		0x04, 0xac, 0x5f, 0x2a, 0x26, 0xb0, 0xff, 0xe0, 0xa2, 0x24, 0x83, 0xb7, 0xaa, 0x48, 0x68, 0x07,
		0x5e, 0x91, 0x6c, 0x2c, 0xd2, 0x7c, 0x03, 0x4c, 0xe2, 0x18, 0x49, 0x91, 0x83, 0x03, 0x78, 0x80,
		0x2a, 0x39, 0xb5, 0x40, 0x85, 0x11, 0x29, 0x1a, 0x9d, 0x36, 0x07, 0x5c, 0x27, 0xd6, 0x40, 0x96,
		0x96, 0x41, 0xb7, 0xc6, 0xa0, 0x71, 0x0e, 0x72, 0x7a, 0xf0, 0x7d, 0x47, 0xda, 0x25, 0x80, 0x8f,
		0x10, 0x7e, 0x82, 0xf8, 0x0a, 0x73, 0xb2, 0x40, 0x27, 0x0b, 0xe5, 0x2d, 0x98, 0x5d, 0x38, 0x87,
		0x80, 0xf5, 0xa9, 0xf3, 0xfd, 0x16, 0xfc, 0xe6, 0x94, 0x49, 0x41, 0x59, 0xda, 0x35, 0xab, 0xef,
		0xe7, 0x32, 0xea, 0xc0, 0xdc, 0x00, 0x4b, 0xe5, 0x0a, 0xc7, 0xe8, 0xb9, 0xb3, 0xdb, 0xee, 0x69,
		0x57, 0x27, 0xdd, 0x52, 0x76, 0x54, 0x16, 0xcf, 0x0b, 0xd5, 0x82, 0x3f, 0x91, 0x75, 0x0e, 0xed,
		0x97, 0xef, 0xc4, 0xcf, 0x04, 0x49, 0x24, 0xe5, 0x6c, 0x4a, 0x53, 0x2a, 0xb3, 0xb2, 0xd0, 0xd1,
		0xef, 0x8a, 0xd0, 0xa3, 0x45, 0xb2, 0x3b, 0x7b, 0x8b, 0xa3, 0xfe, 0x19, 0x7b, 0x0c, 0x7e, 0x97,
		0x7d, 0x09, 0xfc, 0xf0, 0x96, 0x19, 0x56, 0xc6, 0x32, 0xf0, 0x34, 0xa0, 0xc1, 0xc5, 0x80, 0x2e,
		0x06, 0x74, 0x31, 0xa0, 0xbf, 0x35, 0xa0, 0xc1, 0x70, 0xf8, 0x8f, 0x1d, 0xa8, 0x73, 0x4b, 0x1a,
		0x33, 0xc6, 0x25, 0x29, 0x29, 0xdb, 0x97, 0xa5, 0x2c, 0x59, 0xc1, 0x86, 0x6c, 0x49, 0x75, 0x1f,
		0x71, 0x4f, 0x42, 0x26, 0xa3, 0x9e, 0x75, 0x15, 0x55, 0x70, 0x29, 0xf2, 0x44, 0x32, 0xfd, 0x1c,
		0xe6, 0x25, 0xfa, 0x75, 0x52, 0xa2, 0xc7, 0xe6, 0x63, 0xfc, 0x21, 0xa5, 0x7e, 0x69, 0x5a, 0x2e,
		0x3a, 0x98, 0x66, 0x33, 0xf2, 0x06, 0x0f, 0x9c, 0xb7, 0x8d, 0xa0, 0x49, 0x11, 0x1f, 0xa6, 0x0c,
		0x3a, 0x53, 0xb5, 0xa0, 0xab, 0x82, 0x41, 0xf1, 0x05, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00,
		0xff, 0xff, 0x4e, 0x9b, 0x50, 0xe0, 0xbf, 0x0b, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

